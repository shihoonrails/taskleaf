db関連
・schema.rb 
マイグレートすると自動出力される
マイグレートミスったときは、データベースから消した後にマイグレーションファイルを削除する →整合性が保てなくなる

・コマンド
bin/rails db:migrate 最新までマイグレーションを適用
bin/rails db:migrate VERSION = 138254765843 特定バージョンまでマイグレーションが適用された状態にする
bin/rails db:rollback バージョンを１つ戻す
bin/rails db:rollback STEP=2 ばーじょんを指定したステップ数だけ戻す

・データ型
:bloolean 真偽値
:integer 符号付き整数
:float 浮動小数点数
:string 文字列（※短い文字列）
:text 文字列（※長い文字列）
:date 日付
:datetime 日時

・NOT NULL制約
データベースのカラムの値としてNULLを格納する必要がないときに物理的にNULLを保存できないようにする

・バリデーション（validates）
validates :foo, presence: true 必要なデータが入っているか？
validates :foo, numericality: true 数値を期待しているところに数値以外が入っていないか？小数点の有無・正負などが期待通りの数値か？
validates :foo, inclusion: { in: 0..9 } 数値gはにが期待通りか？
validates :foo, length: { maximum: 30 } 文字列の長さが規定通りか？
validates :foo, format: { with: 正規表現 }
validates :foo, inclusion: { in: %w(OK NG) }
validates :foo, uniquness: true
validates :foo, confirmation: true 

before_validation 検証前の値の正規化
after_validation 検証結果(エラーメッセージ)の加工
before_save before_create before_update saveのために裏側で行いたいデータ準備を行う（ある属性の値に従ってある関連(後述)を作成するなど。）検証エラーを出してもユーザーにはどうすることもできない状態以上を防ぐために例外を出す。
before_save before_create before_update そのモデルの状態に応じて他のモデルの状態を変えるなど連動した挙動を実現、検証エラーを出してもユーザーにはどうすることもできない状態異常を防ぐために例外を出す。
before_destroy 削除してOKかをチェックし、ダメなら例外を出して防ぐ。
after_destroy そのモデルの削除に応じて他のモデルの状態を変えるといった連動した挙動を実現

・メソッド
save save! オブジェクトの現状通りに登録・更新を行う
update update! update_attributes update_attributes! 変更内容を引数で指定して更新を行う。save save!を更新用途に便利にしたもの
update_attributes １つの属性の変更を行う。検証は行わないがその他の点はsaveと同様
update_column update_columns 変更内容を引数で指定→更新 モデルに実装された検証やコールバックなどを実行せず直接的に更新SQLを実行
create create! オブジェクトを生成してsave/save!を実行
update_all 更新SQLを実行。検証やコールバックは実行されない

・パスワード
has_secure_password パスワード属性が追加される。ユーザーが入力した生のパスワードを一時的に格納されるための属性
 #コンソール
    > User.new(name: 'ユーザー', email: 'sample@example.com', password: 'password', password_confirmation: 'password')
    > user.save
    > user.password_digest "$2a$12$mClDtUYQGavR5nJM80w9K.lBSgO3wXtZGFpvI.XmOkuBhzSdFcsQC"

・一般的なCLUD機能(Admin::UsersController)
/admin/users/new get new 新規登録画面
/admin/users post create 登録
/admin/users/17/edit get edit 編集画面
/admin/users/17 patch,put update 更新
/admin/users get index 一覧
/admin/users/17 get show 詳細
/admin/users/17 delete destroy 削除

・絞り込み条件
where 
order 検索結果の並び順を指定
joins 
group
select
limit 取得個数を制限する
distinct
all 何もしない検索条件。
none 何もヒットしない検索条件。

・実行部分
find idを指定してレコードを取得
find_by 条件を指定して見つかったレコードを一件取得する
first 検索条件に合う最初のレコードに対応するオブジェクトを取得
last 検索条件に合う最後のレコードに対応するオブジェクトを取得
exist? 検索条件に合うレコードの有無を取得する
count レコード数
average 平均取得
maximum 最大値
minimum 最小値
update_all 検索条件に合うレコードを全てインスタンス化せずに更新
delete_all 検索条件に合うレコードを全てインスタンス化せずに削除
destroy_all 検索条件に合うレコードを全てインスタンス化した上でdestroyメソッドを通じて削除


・リッジポール
マイグレーションファイルを無しにschema.rbを元にマイグレートする便利なやつ

・トランザクション
一連の複数の処理によるデータベースの整合性を保つための機能。

RESTful 
HTTPリクエストはそのリクエストで必要な情報を全て持ち、前のリクエストからの場外が保存されている必要が無い（ステートレス）
個々の情報（リソース）への操作の表現がHTTPメソッドとして統一されている
個々の情報（リソース）がそれぞれ一意なURLで表す
ある情報（リソース）から別の情報を参照したいときはリンクを利用

routs.rb
    scope... URL回送（:path）,モジュール（:module）,URLパターン名のプリフィックス（:as）などをオプションに指定することでブロック内の定義にまとめて一定の制約をかける
     モデル>>データベースからデータを取ってくる時に制約をかける。汎用性などによってコントローラーで制約をかけることもある。
     gsub 置換する
    namespace... URL階層、モジュール、URLパターン名に一括で一定の制約をかける（scope）と違い、一括のため

    ; HTTPメソッド サーバーへのリクエストの際に指定・情報の送信・取得方法を表す
    ; URLパターン URLそのものや:idのように一部の任意の文字が入るようなパターン
    ; URLパターン 定義したURLパターンごとに一意のなまえ　この名前を元にヘルパーメソッドが用意される
    ; コントローラー 呼び出したいアクションのコントローラークラスを指定
    ; アクション 呼び出したいアクションを指定

    ; get '/login', to: 'sessions#new' getメソッド '/login' URLに対してリクエスト SessionsControllerのnewアクションを呼び出す。'/login'URLをヘルパーメソッドで生成できるようにする
    ; URLヘルパーメソッドを使う理由 "/tasks"といった文字列を直接記述・{ controller: :tasks, action: :index } といったハッシュを利用・URLヘルパーメソッドを利用

    ; ※インサート文をgptで聞くのもいいけど、内容を全部理解した上で記述する！！

日本時間を見る
; config.time_zone = "Asia/Tokyo"
; railsコンソールでは $Time.current

開発環境で本番用のエラー画面
    confi/environments/development.rb
    config.log_level = :warn  warn以上のログ出力
    メソッド
        rescue_from 

ログ出力 
    logger.debug "task: #{@task.attributes.inspect}" etc..

    ログレベル メソッド呼び出し例
        5    logger.unknown    '不明なエラー'    
        4   logger.fatal    '致命的なエラー'
        3    logger.error    'エラー'
        2    logger.warn    '警告'
        1    logger.info    'お知らせ'
        0    logger.debug    'デバッグ'

セキュリティ
    アプリケーションログの特定パラメータ値を隠して出力する設定
        /Users/nakanoshiho/Downloads/taskleaf/config/initializers/filter_parameter_logging.rb

    Strong Parameters
        ホワイトリスト形式/ コントローラーでリクエストパラメーターを受け取る時に想定通りのパラメーターかどうかをチェックする機能
    CSRF対策
        CSRF ユーザーがログインしているwebアプリケーション悪意ある操作を行う攻撃（別のサイト上に用意したコンテンツのリンクを踏んだり画像表示下したことをきっかけ）
        Ajaxリクエスト = JavascriptによってPOSTメソッドでサーバーにリクエスト（トークン出力...csrf_meta_tagsヘルパー）
    インジェクション
        webアプリケーションに悪意のあるスクリプトやパラメータを入力しそれが評価される時の権限で実行させる攻撃（ユーザーがデータを入力可能なところ全てが攻撃の対象）
        ・XSSインジェクション ユーザーに表示するコンテンツに悪意のあるスクリプト（js）を仕掛けそのコンテンツを表示したユーザーにスクリプトを実行させることで任意の操作を行う攻撃※Cookieの読み書きも行える 
            → railsではユーザーの入力した文字列を出力数さいに自動的にHTMLをエスケープする（「&」「""「<」「>」は無害なHTML表現形式「&amp;」「&quot:」「&lt;」「&gt;」に置き換えられる）
        ・RUBYインジェクション ※ユーザーからの入力をそのままsendに渡さない
            例//
                ✖️ users = User.send(params[:scope]) 
                ⚪︎ ユーザー入力をcase式などで切り分ける or 
                    rais "Invilid scope! #{params[:scope]}" if whitelist.exclude?(params[:scope])
                    users = User.send(params[:scope])
        ・コマンドラインインジェクション
        ・SQLインジェクション 「Where」メソッドなどActiveRecordのいくつかのクエリメソッドはSQL文字列を直接渡して条件指定することができる（データ入力時に悪意のあるSQLを入力することで攻撃）
            → SQL文字列にユーザーが入力した値を直接埋め込めないようにする
            例//
                ✖️ users = User.where("name: 'params[:name]'").map(&:email) → SELECT "users". * FROM "users" WHERE (users. '' OR '1') --)
                ⚪︎ users = User.where(name: params[:name]) → SELECT "users". * FROM "users" WHERE "users". "name" = $1 [["name", "' OR '1') --"]]
                ◎ users = User.where('name = ?', params[:name]) → SELECT "users". * FROM "users" WHERE (name = ''' OR ''1'') --') それかActiveRecord::Baseのメソッドを使って直接的にSQLを実行できる
    Content Security Policy （CSP）を設定
        config/initializers/content_security_policy.rb のコメントアウト箇所

    ActiveStorage::Blob 添付されたファイルに対応するモデル。ファイルの実態をデータベース外で管理→それ以外の情報、識別key、ファイル名、Content-Type、ファイルのメタデータ、サイズなどの管理
    ActiveStorage::Attachment Blobとアプリ内のさまざまなモデルを関連つける中間テーブルに当たるモデル

    selfの使い方を教えて欲しい具体例で クラス全体の中から何かを取り出す時に使う。特殊な変数の一種
    self = task 
    クラス内のselfはの呼び出し/インスタンスメソッド内のselfはそのメソッドが呼び出されたインスタンスを指す。インスタンス属性や他のインスタンスメソッドにアクセスできる
    



